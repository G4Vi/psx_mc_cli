#!/usr/bin/perl

# Copyright (c) 2021 Gavin Hayes and others, see LICENSE in the root of the project

use strict; use warnings;
use feature 'say';
use Encode qw(decode);
use Getopt::Long qw(GetOptions);
Getopt::Long::Configure qw(gnu_getopt);
use FindBin;
use lib "$FindBin::Bin/../lib";
use PSX::MC;

sub extract_icon {
	my($save) = @_;
    my $fileheader = $save->{'header'};
	my $contents = $save->{'data'};

	if($fileheader->{'framecnt'} == 0) {
		warn("Save is invalid, bad icon framecnt read, assuming 1");
		$fileheader->{'framecnt'} = 1;
	}
	my $framedata = substr($contents, 0x80, 0x80*$fileheader->{'framecnt'});

	my $timbuf = '' .
	pack('V', 0x10) .                                     # magic
	pack('V', 0x8)  .                                     # flags, hasclut and (flags & 3) == 0 (4bit clut)
	pack('V', 12+(16*2)) .                                # clut len including header
	pack('vvvv', 0, 0, 16, 1) .                           # clut pos and dimensions
	pack('v16', @{$fileheader->{'clut'}}) .               # actual clut
	pack('V', 12+(0x80 * $fileheader->{'framecnt'})) .    # image len including header
	pack('vvvv', 1, 0, 4, 16*$fileheader->{'framecnt'}) . # image pos and dimensions
	pack('a*', $framedata);	                              # actual image
    print $timbuf;
}

my $dumpclut;
my $cdata;
GetOptions(
    'cclut|c' => \$dumpclut,
	'cdata|d' => \$cdata
) or die "Usage: $0 inputfile [savesubstring] [--cclut]\n";


@ARGV >= 1 or die('not enough args provided');

my $file = $ARGV[0];
my $mcfile = PSX::MC->load($file);
if(! $mcfile) {
	die("unable to load: $file");
}

my $searchfname;
$searchfname = decode('utf8', $ARGV[1]) if (@ARGV >= 2);
my @saves;
# find a valid save
if($mcfile->{'type'} eq 'mcd') {
	$mcfile->foreachDirEntry(sub {
		my ($entry, $newsave, $entrydata) = @_;			
        if($newsave && PSX::MC::SaveNameAndTitleMatch($newsave, $searchfname)) {
			push @saves, $newsave;
			return;
		}
	});	
}
elsif(($mcfile->{'type'} eq 'mcs') ||($mcfile->{'type'} eq 'rawsave'))  {
	my $save = $mcfile->readSave();
	push @saves, $save;
}
else {
	die("unhandled format");
}

my $save = shift @saves;
$save or die("no save found to extract icon");
$save->{'header'} = PSX::MC::parse_file_header($save->{'data'});
if(! $dumpclut && ! $cdata) {
	extract_icon($save);
}
elsif(! $dumpclut) {
	my $cfile = "#include <stdint.h>\n\n";
	#my $red_mask = 0x1F;
    #my $green_mask = 0x3E0;
    #my $blue_mask = 0x7C00;
	#$cfile .= "static const uint8_t PALETTE[16][3] = {";
	#for my $rgb555 (@{$save->{'header'}{'clut'}}) {
	#	my $red = ($rgb555 & $red_mask) << 3;
	#	my $green = (($rgb555 & $green_mask) >> 5) << 3;
	#	my $blue = (($rgb555 & $blue_mask) >> 10) << 3;
	#	$cfile .= sprintf(" {0x%02X, 0x%02X, 0x%02X},", $red, $green, $blue);
	#}
	my $fcount = $save->{'header'}{'framecnt'};
	my $contents = $save->{'data'};
    $cfile .= 'static const uint8_t IMDATA[' . $fcount . "][16][16] = {";
	for(my $i = 0; $i < $fcount; $i++) {
		$cfile .= "\n{";
		my $frame = substr($contents, (($i+1) * 0x80), 0x80);
		for(my $y = 0; $y < 16; $y++) {
			$cfile .= "\n";
			for(my $x = 0; $x < 16; $x++) {
				my $ch = vec($frame, ($y * 16)+$x, 4);
				$cfile .= " $ch,";
			}
			chop $cfile;			
		}
		$cfile .= "\n},";
	}
	chop $cfile;
	$cfile .= "};\n";
	$cfile .= "#define FRAMECNT $fcount\n";
	print $cfile;

}
else {
	my $cfile = "#include <stdint.h>\n\n";
	$cfile .= "static const uint16_t PALETTE[16] = {";
	for my $color (@{$save->{'header'}{'clut'}}) {
		$cfile .= sprintf(" 0x%04X,", $color);
	}
	chop $cfile;
	$cfile .= " };\n";
	print $cfile;
}

